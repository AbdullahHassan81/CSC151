import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import javax.swing.*;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;

    private static class JSONObject {

        public JSONObject() {
        }

        JSONObject(String jsonData) {
                    throw new UnsupportedOperationException("Not supported yet.");
                }

        private JSONObject getJSONObject(String conversion_rates) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        private double getDouble(String usd) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
            }
        public class converter{
        
            public static void main(String[] args) {
        
                final String API_KEY = "590f27b67384db04e619ce5f"; // Replace with your API key from the currency API
                final String API_URL = "https://v6.exchangerate-api.com/v6/590f27b67384db04e619ce5f/latest/USD" + API_KEY + "/latest/USD";
                final Map<String, Double> exchangeRates = new HashMap<>();
        
                fetchExchangeRates(); // Fetch initial rates
                // Call a method periodically to refresh the rates (you can adjust the interval)
                Timer timer = new Timer(1000 * 60 * 60, e -> fetchExchangeRates()); // Refresh rates every hour
                timer.start();
                
                // Set up the GUI
                JFrame frame = new JFrame("Currency Converter");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(400, 300);
                frame.setLayout(null);
        
                JTextField searchBar = new JTextField();
                searchBar.setBounds(20, 20, 340, 30);
                frame.add(searchBar);
        
                List<String> sortedCurrencies = new ArrayList<>(exchangeRates.keySet());
                Collections.sort(sortedCurrencies);
        
                JComboBox<String> currencyDropdown = new JComboBox<>(sortedCurrencies.toArray(new String[0]));
                currencyDropdown.setBounds(20, 70, 340, 30);
                frame.add(currencyDropdown);
        
                JButton convertButton = new JButton("Convert");
                convertButton.setBounds(20, 120, 340, 30);
                frame.add(convertButton);
        
                JLabel outputLabel = new JLabel("");
                outputLabel.setBounds(20, 170, 340, 30);
                frame.add(outputLabel);
        
                convertButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        try {
                            String usdInput = searchBar.getText();
                            double usdAmount = Double.parseDouble(usdInput);
                            if (usdAmount <= 0) {
                                JOptionPane.showMessageDialog(frame, "Please enter a positive amount.");
                                return;
                            }
                            String selectedCurrency = (String) currencyDropdown.getSelectedItem();
                            double convertedAmount = usdAmount * exchangeRates.get(selectedCurrency);
                            outputLabel.setText(String.format("%.2f USD = %.2f %s", usdAmount, convertedAmount, selectedCurrency));
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(frame, "Please enter a valid number.");
                        }
                    }
                });
        
                frame.setVisible(true);
            }
        
            private static void fetchExchangeRates() {
                try {
                    String API_URL = null;
                    // Send the request to the API
                    URL url = new URL(API_URL);
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("GET");
                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    StringBuilder response = new StringBuilder();
                    String line;
        
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                    reader.close();
                    
        
                    class ObjectMapper {
        
                    JsonNode readTree(String toString) {
                        throw new UnsupportedOperationException("Not supported yet.");
                    }
        
                    }
        
                    // Parse the JSON response
                    //ObjectMapper objectMapper = new ObjectMapper();
                    //JsonNode rootNode = objectMapper.readTree(response.toString());
                    //JsonNode conversionRates = (JsonNode) rootNode.path("conversion_rates");
                    
        
        
                        // JSON data (as a string)
                    String jsonData = "{...}"; // Replace with the actual JSON string
                    
                    // Parse the JSON string into a JSONObject
                    JSONObject jsonObject = new JSONObject(jsonData);
            
            // Navigate to the conversion rates
            JSONObject conversionRates = jsonObject.getJSONObject("conversion_rates");
            
            // Extract the USD value and convert to double
            double usdRate = conversionRates.getDouble("USD");
            
            // Print the USD rate
            System.out.println("USD Conversion Rate: " + usdRate);
                
            // Update the exchange rates
            //exchangeRates.clear(); // Clear previous rates
            //Iterator<String> fieldNames = conversionRates.fieldNames();
            //while (fieldNames.hasNext()) {
               // String country = fieldNames.next();
                // we need the rate as a double, we're starting with a JsonNode
                //JsonNode rate = (JsonNode)conversionRates.path(country);
                //System.err.println("Rate is: " + rate.toString();)
                //exchangeRates.put(country, -1); // should be rate as double
            //}
            
            System.out.println("Exchange rates updated.");
        } catch (Exception e) {
            System.err.println("Error fetching exchange rates: " + e.getMessage());
        }

        public Exception getE() {
            return e;
        }

        public void setE(Exception e) {
            this.e = e;
        }
    }

    public static String getAPI_KEY() {
        String API_KEY = null;
        return API_KEY;
    }

    public static Map<String, Double> getExchangeRates() {
        Map<String, Double> exchangeRates = null;
        return exchangeRates;
    }

    private static class exchangeRates {

        private static void clear() {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public exchangeRates() {
        }
    }
}
